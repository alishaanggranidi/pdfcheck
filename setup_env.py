#!/usr/bin/env python3
"""
Environment Setup Script for PDF Validator Agent
Creates .env file with user input
"""

import os

def create_env_file():
    """Create .env file with user input"""
    print("=== PDF VALIDATOR AGENT - ENVIRONMENT SETUP ===")
    print("This script will help you set up your environment variables.")
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = input(".env file already exists. Overwrite? (y/n): ").strip().lower()
        if overwrite not in ['y', 'yes']:
            print("Setup cancelled.")
            return
    
    print("Enter your API keys (press Enter to skip optional fields):")
    print()
    
    # Required fields
    google_api_key = input("Google API Key (Required): ").strip()
    if not google_api_key:
        print("Google API Key is required!")
        return
    
    # Optional fields
    print("\nOptional fields (press Enter to skip):")
    langfuse_public = input("Langfuse Public Key: ").strip()
    langfuse_secret = input("Langfuse Secret Key: ").strip()
    langfuse_host = input("Langfuse Host [https://api.langfuse.com]: ").strip() or "https://api.langfuse.com"
    
    app_name = input("App Name [PDF_Validator_Agent]: ").strip() or "PDF_Validator_Agent"
    log_level = input("Log Level [INFO]: ").strip() or "INFO"
    min_signatures = input("Min Signatures [3]: ").strip() or "3"
    max_file_size = input("Max File Size MB [10]: ").strip() or "10"
    
    # Create .env content
    env_content = f"""# PDF Validator Agent - Environment Variables
# Generated by setup_env.py

# Google Gemini API Key (Required)
GOOGLE_API_KEY={google_api_key}

# Langfuse Configuration (Optional - for monitoring)
LF_PUBLIC_KEY={langfuse_public}
LF_SECRET_KEY={langfuse_secret}
LF_HOST={langfuse_host}

# Application Configuration
APP_NAME={app_name}
LOG_LEVEL={log_level}

# PDF Processing Configuration
MIN_SIGNATURES={min_signatures}
MAX_FILE_SIZE_MB={max_file_size}
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print(f"\n✓ .env file created successfully!")
        print("You can now run the PDF Validator Agent.")
    except Exception as e:
        print(f"✗ Error creating .env file: {e}")

def main():
    """Main function"""
    try:
        create_env_file()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user")
    except Exception as e:
        print(f"\nUnexpected error: {e}")

if __name__ == "__main__":
    main()
